"Pathogen setup
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
call pathogen#helptags()

"Set leader key
let mapleader = ","

"Tab cycle through buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

"Set solarized color scheme
set background=dark
"set background=light
colorscheme solarized

"Sets vim backup directories
set backupdir=$HOME/.vimbackups//,/tmp//
set directory=$HOME/.vimbackups//,/tmp//

"Code formatting
syntax on
set t_Co=256
filetype plugin indent on
set ts=2
set shiftwidth=2
set expandtab
set smarttab
set number
set relativenumber
set modeline

"Column width
set colorcolumn=80
highlight colorcolumn ctermbg=Black

"Maps omnicomplertion to <C-f>
inoremap <C-f> <C-x><C-O>

"Maps pastetoggle to <F4>
set pastetoggle=<F4>

"vim-gitgutter settings
let g:gitgutter_signs = 1
let g:gitgutter_realtime = 1

"vim-sourcegraph settings
let g:SOURCEGRAPH_AUTO = "false"

"vim-go settings
let g:go_disable_autoinstall = 0

"unite settings
map <C-p> :Unite file_rec<CR>
map <leader>ur :Unite file_mru<CR>
map <leader>ub :Unite file buffer<CR>

"drocker
map <leader>dr :!drocker<Space>
map <leader>dre :!drocker errors<CR>
map <leader>drc :!drocker drush cr<CR>

"neocomplete settings
let g:neocomplete#enable_at_startup = 1

"Tagbar toggle
nmap <F8> :TagbarToggle<CR>

"Nerdtree toggle
map <F7> :NERDTreeToggle<CR>

"Source files
source $HOME/.vim/source/gotags

"Vdebug
"let g:vdebug_options = {'path_maps': {"/vagrant_data": "/Users/gsullice/development/sites"}, 'server': '', 'break_on_open': 0}
let g:vdebug_options= {
      \ "port" : 9000,
      \ "timeout" : 30,
      \ "break_on_open" : 0,
      \}
"\ "path_maps" : {"/var/www": ""}
let g:vdebug_options["watch_window_style"] = "compact"
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/ltlt/ltlt-drupal/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/c4l/c4l-platform-drupal/public_html"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/stanford/pts/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/newsu/newsu-main/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/rema/rema-main/public_html"}
let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/aspireit/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/aten/aspirations/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/contrib/jsonapi/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/contrib/drupal/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/contrib/connection/docroot"}
"let g:vdebug_options['path_maps'] = {"/var/www/html": "/home/gabe/projects/github.com/gabesullice/form-checker-example/docroot"}
"let g:vdebug_options['server'] = ""

set path=$PWD/**

map <C-S>c :w !xclip -sel c<CR>

"Neosnippets
"" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

"" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

"" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_php_checkers = ['phpcs']
let g:syntastic_php_phpcs_args="--standard=Drupal"

if has('statusline')
  set laststatus=2
  " Broken down into easily includeable segments
  set statusline=%<%f\ " Filename
  set statusline+=%w%h%m%r " Options
  set statusline+=%{fugitive#statusline()} " Git Hotness
  set statusline+=\ [%{&ff}/%Y] " filetype
  set statusline+=\ [%{getcwd()}] " current dir
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_enable_signs=1
  set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif

let g:syntastic_javascript_checkers = ['eslint']

au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gf <Plug>(go-test-func)
au FileType go nmap <leader>gi <Plug>(go-imports)
au FileType go nmap <leader>gd <Plug>(go-doc-vertical)
au FileType go nmap <leader>d <Plug>(go-def)
au FileType go nmap <leader>dl <Plug>(go-def-pop)

map <leader>nt :!npm test<CR>
map <leader>nb :!npm run build<CR>

" Make vim read the current line
"map <Space>l :.w ! espeak --stdin --stdout --punct <bar> paplay<CR><CR>
au BufRead,BufNewFile *.install set filetype=php
au BufRead,BufNewFile *.theme set filetype=php
au BufRead,BufNewFile *.inc set filetype=php

nmap <Space> zA
